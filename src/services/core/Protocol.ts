// Messages that the server can emit to clients
export enum GameServerEvent {
    AUTHREQUEST = 'authreq',
    CONFIGURE = 'configure',
    // DISCONNECT = 'disconnect',
    CREATE = 'create',
    UPDATE = 'update',
    DESTROY = 'destroy',
    ACTIONSTATUS = 'actionstatus',
    MESSAGE = 'message',
    PONG1 = 'pong1',
    PONG2 = 'pong2',
}

// This is a bit of a mishmash, I'm trying
// to use underscores as if they're dots, kind of..
export enum GameServerEventField {
    CONFIGURE_PLAYERNID = 'playernid',
    ACTION_TYPE = 'action',
    ACTION_STATUS_SET = 'actions',
    // Action Types
    ACTION_MOVE = 'move',
    //ACTION_CAST                 = "cast",
    //ACTION_USE                  = "use",
    //ACTION_EQUIP                = "equip",
    //ACTION_UNEQUIP              = "unequip",
    //ACTION_TAKE                 = "take",
    //ACTION_DROP                 = "drop",

    // Action Statuses
    ACTION_STATUS_COMPLETED = 'completed',
    ACTION_STATUS_INVALID = 'invalid',
    ACTION_STATUS_CANCELLED = 'cancelled',
    ACTION_STATUS_INCOMPLETE = 'incomplete',
}

// Messages that the client can send to the server
export enum GameClientEvent {
    SOCKETCONNECT = 'connection', // this is hardcoded by socket.io
    AUTHRESPONSE = 'authr',
    PLAYERINIT = 'playerinit',
    ACTION = 'caction', // client action request
    CLIENT_DISCONNECT = 'cdisconnect', // requested disconnection
    DISCONNECT = 'disconnect',
    MESSAGE = 'message',
    PING1 = 'ping1',
    PING2 = 'ping2',
}

/* The protocol is:

Client -> SOCKETCONNECT
Server <- AUTH_REQUEST
Client -> AUTH_RESPONSE
Server <- CONFIGURE
Client -> PLAYER_INIT
Server <- CREATE, UPDATE, DESTROY
Client -> ACTION, MESSAGE
Server <- ACTION_STATUS, CREATE, UPDATE, DESTROY, MESSAGE
Client -> DISCONNECT
*/

/*The ACTION message type sends the following data
{"id": number, "action": actiontype, "args": [list]}
Where id is an id generated by the client/entity (to get a reply)
and "actiontype" and args are one of the below
MOVE    [dir]
CAST    [spellname, targetnid]
USE     [itemid, targetnit]
EQUIP   [itemid]
UNEQUIP [itemid]
TAKE    [itemid]
DROP    [itemid]

The ACTION_STATUS message type sends the following data
{"id": number, "result": result, "progress": number, "msg": string}
id: matches the sent actionid
result is one of INVALID, INCOMPLETE, COMPLETE
progress is %complete for INCOMPLETE actions (that take longer than one tick)
msg is a server message associated with the action.
*/
